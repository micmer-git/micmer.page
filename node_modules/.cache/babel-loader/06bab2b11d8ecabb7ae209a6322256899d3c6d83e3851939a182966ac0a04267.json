{"ast":null,"code":"import React,{useState}from'react';import'./Segments.css';import{mockSegments,formatTime,formatPace,getSegmentsByType,getSegmentsBySport,getTotalAttempts,getTotalClimbingElevation}from'./segmentData';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Segments=()=>{const[filter,setFilter]=useState('all');const[typeFilter,setTypeFilter]=useState('all');// Filter segments based on selected filters\nconst filteredSegments=mockSegments.filter(segment=>{const sportMatch=filter==='all'||segment.sport===filter;const typeMatch=typeFilter==='all'||segment.type===typeFilter;return sportMatch&&typeMatch;});// Calculate statistics\nconst totalAttempts=getTotalAttempts(filteredSegments);const totalClimbingElevation=getTotalClimbingElevation(filteredSegments);const runSegments=getSegmentsBySport(filteredSegments,'Run');const rideSegments=getSegmentsBySport(filteredSegments,'Ride');const climbSegments=getSegmentsByType(filteredSegments,'climb');return/*#__PURE__*/_jsx(\"div\",{className:\"segments-dashboard\",children:/*#__PURE__*/_jsxs(\"section\",{className:\"segments-section\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"section-title\",children:\"Segments & Climbs\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"segments-stats\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"segment-stat\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"stat-value\",children:filteredSegments.length}),/*#__PURE__*/_jsx(\"div\",{className:\"stat-label\",children:\"Segments\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"segment-stat\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"stat-value\",children:totalAttempts}),/*#__PURE__*/_jsx(\"div\",{className:\"stat-label\",children:\"Total Attempts\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"segment-stat\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"stat-value\",children:climbSegments.length}),/*#__PURE__*/_jsx(\"div\",{className:\"stat-label\",children:\"Climbs\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"segment-stat\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"stat-value\",children:[(totalClimbingElevation/1000).toFixed(1),\"k\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"stat-label\",children:\"Elevation Climbed (m)\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"segment-stat\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"stat-value\",children:runSegments.length}),/*#__PURE__*/_jsx(\"div\",{className:\"stat-label\",children:\"Run Segments\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"segment-stat\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"stat-value\",children:rideSegments.length}),/*#__PURE__*/_jsx(\"div\",{className:\"stat-label\",children:\"Ride Segments\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"filter-controls\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"filter-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Sport:\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"filter-buttons\",children:[/*#__PURE__*/_jsx(\"button\",{className:filter==='all'?'active':'',onClick:()=>setFilter('all'),children:\"All\"}),/*#__PURE__*/_jsx(\"button\",{className:filter==='Run'?'active':'',onClick:()=>setFilter('Run'),children:\"Running\"}),/*#__PURE__*/_jsx(\"button\",{className:filter==='Ride'?'active':'',onClick:()=>setFilter('Ride'),children:\"Cycling\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"filter-group\",children:[/*#__PURE__*/_jsx(\"label\",{children:\"Type:\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"filter-buttons\",children:[/*#__PURE__*/_jsx(\"button\",{className:typeFilter==='all'?'active':'',onClick:()=>setTypeFilter('all'),children:\"All\"}),/*#__PURE__*/_jsx(\"button\",{className:typeFilter==='climb'?'active':'',onClick:()=>setTypeFilter('climb'),children:\"Climbs\"}),/*#__PURE__*/_jsx(\"button\",{className:typeFilter==='sprint'?'active':'',onClick:()=>setTypeFilter('sprint'),children:\"Sprints\"}),/*#__PURE__*/_jsx(\"button\",{className:typeFilter==='other'?'active':'',onClick:()=>setTypeFilter('other'),children:\"Other\"})]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"segments-visualization\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Segment Attempts Visualization\"}),/*#__PURE__*/_jsx(\"div\",{className:\"segments-chart\",children:filteredSegments.map(segment=>/*#__PURE__*/_jsxs(\"div\",{className:\"segment-bar-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"segment-bar-label\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"segment-name\",children:segment.name}),/*#__PURE__*/_jsx(\"span\",{className:\"segment-location\",children:segment.location})]}),/*#__PURE__*/_jsx(\"div\",{className:\"segment-bar-wrapper\",children:/*#__PURE__*/_jsx(\"div\",{className:\"segment-bar \".concat(segment.sport==='Run'?'run':'ride'),style:{width:\"\".concat(Math.min(segment.attempts*5,100),\"%\")},children:/*#__PURE__*/_jsx(\"span\",{className:\"segment-attempts\",children:segment.attempts})})})]},segment.id))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"segments-table-container\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Segments Details\"}),/*#__PURE__*/_jsxs(\"table\",{className:\"segments-table\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Segment\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Type\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Sport\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Distance\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Elevation\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Grade\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Attempts\"}),/*#__PURE__*/_jsx(\"th\",{children:\"PR\"}),/*#__PURE__*/_jsx(\"th\",{children:\"PR Date\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:filteredSegments.map(segment=>/*#__PURE__*/_jsxs(\"tr\",{className:segment.sport==='Run'?'run-row':'ride-row',children:[/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsxs(\"div\",{className:\"segment-name-cell\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"segment-name\",children:segment.name}),/*#__PURE__*/_jsx(\"span\",{className:\"segment-location\",children:segment.location})]})}),/*#__PURE__*/_jsx(\"td\",{children:segment.type}),/*#__PURE__*/_jsx(\"td\",{children:segment.sport}),/*#__PURE__*/_jsxs(\"td\",{children:[(segment.distance/1000).toFixed(1),\" km\"]}),/*#__PURE__*/_jsxs(\"td\",{children:[segment.elevation_gain||'-',\" m\"]}),/*#__PURE__*/_jsx(\"td\",{children:segment.average_grade?\"\".concat(segment.average_grade,\"%\"):'-'}),/*#__PURE__*/_jsx(\"td\",{children:segment.attempts}),/*#__PURE__*/_jsx(\"td\",{children:segment.pr_time&&/*#__PURE__*/_jsxs(\"div\",{className:\"pr-cell\",children:[/*#__PURE__*/_jsx(\"div\",{children:formatTime(segment.pr_time)}),/*#__PURE__*/_jsxs(\"div\",{className:\"pr-detail\",children:[segment.sport==='Run'&&segment.pr_pace&&formatPace(segment.pr_pace),segment.sport==='Ride'&&segment.pr_power&&\"\".concat(segment.pr_power,\"W\")]})]})}),/*#__PURE__*/_jsx(\"td\",{children:segment.pr_date||'-'})]},segment.id))})]})]})]})});};export default Segments;","map":{"version":3,"names":["React","useState","mockSegments","formatTime","formatPace","getSegmentsByType","getSegmentsBySport","getTotalAttempts","getTotalClimbingElevation","jsx","_jsx","jsxs","_jsxs","Segments","filter","setFilter","typeFilter","setTypeFilter","filteredSegments","segment","sportMatch","sport","typeMatch","type","totalAttempts","totalClimbingElevation","runSegments","rideSegments","climbSegments","className","children","length","toFixed","onClick","map","name","location","concat","style","width","Math","min","attempts","id","distance","elevation_gain","average_grade","pr_time","pr_pace","pr_power","pr_date"],"sources":["C:/Users/Alessandro Merelli/Documents/GitHub/Sites/micmer.page/src/components/segments/Segments.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport './Segments.css';\nimport { mockSegments, formatTime, formatPace, getSegmentsByType, getSegmentsBySport, getTotalAttempts, getTotalClimbingElevation } from './segmentData';\n\nconst Segments: React.FC = () => {\n  const [filter, setFilter] = useState<'all' | 'Run' | 'Ride'>('all');\n  const [typeFilter, setTypeFilter] = useState<'all' | 'climb' | 'sprint' | 'descent' | 'other'>('all');\n  \n  // Filter segments based on selected filters\n  const filteredSegments = mockSegments.filter(segment => {\n    const sportMatch = filter === 'all' || segment.sport === filter;\n    const typeMatch = typeFilter === 'all' || segment.type === typeFilter;\n    return sportMatch && typeMatch;\n  });\n  \n  // Calculate statistics\n  const totalAttempts = getTotalAttempts(filteredSegments);\n  const totalClimbingElevation = getTotalClimbingElevation(filteredSegments);\n  const runSegments = getSegmentsBySport(filteredSegments, 'Run');\n  const rideSegments = getSegmentsBySport(filteredSegments, 'Ride');\n  const climbSegments = getSegmentsByType(filteredSegments, 'climb');\n  \n  return (\n    <div className=\"segments-dashboard\">\n      <section className=\"segments-section\">\n        <h2 className=\"section-title\">Segments & Climbs</h2>\n        \n        <div className=\"segments-stats\">\n          <div className=\"segment-stat\">\n            <div className=\"stat-value\">{filteredSegments.length}</div>\n            <div className=\"stat-label\">Segments</div>\n          </div>\n          <div className=\"segment-stat\">\n            <div className=\"stat-value\">{totalAttempts}</div>\n            <div className=\"stat-label\">Total Attempts</div>\n          </div>\n          <div className=\"segment-stat\">\n            <div className=\"stat-value\">{climbSegments.length}</div>\n            <div className=\"stat-label\">Climbs</div>\n          </div>\n          <div className=\"segment-stat\">\n            <div className=\"stat-value\">{(totalClimbingElevation / 1000).toFixed(1)}k</div>\n            <div className=\"stat-label\">Elevation Climbed (m)</div>\n          </div>\n          <div className=\"segment-stat\">\n            <div className=\"stat-value\">{runSegments.length}</div>\n            <div className=\"stat-label\">Run Segments</div>\n          </div>\n          <div className=\"segment-stat\">\n            <div className=\"stat-value\">{rideSegments.length}</div>\n            <div className=\"stat-label\">Ride Segments</div>\n          </div>\n        </div>\n        \n        <div className=\"filter-controls\">\n          <div className=\"filter-group\">\n            <label>Sport:</label>\n            <div className=\"filter-buttons\">\n              <button \n                className={filter === 'all' ? 'active' : ''} \n                onClick={() => setFilter('all')}\n              >\n                All\n              </button>\n              <button \n                className={filter === 'Run' ? 'active' : ''} \n                onClick={() => setFilter('Run')}\n              >\n                Running\n              </button>\n              <button \n                className={filter === 'Ride' ? 'active' : ''} \n                onClick={() => setFilter('Ride')}\n              >\n                Cycling\n              </button>\n            </div>\n          </div>\n          \n          <div className=\"filter-group\">\n            <label>Type:</label>\n            <div className=\"filter-buttons\">\n              <button \n                className={typeFilter === 'all' ? 'active' : ''} \n                onClick={() => setTypeFilter('all')}\n              >\n                All\n              </button>\n              <button \n                className={typeFilter === 'climb' ? 'active' : ''} \n                onClick={() => setTypeFilter('climb')}\n              >\n                Climbs\n              </button>\n              <button \n                className={typeFilter === 'sprint' ? 'active' : ''} \n                onClick={() => setTypeFilter('sprint')}\n              >\n                Sprints\n              </button>\n              <button \n                className={typeFilter === 'other' ? 'active' : ''} \n                onClick={() => setTypeFilter('other')}\n              >\n                Other\n              </button>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"segments-visualization\">\n          <h3>Segment Attempts Visualization</h3>\n          <div className=\"segments-chart\">\n            {filteredSegments.map(segment => (\n              <div key={segment.id} className=\"segment-bar-container\">\n                <div className=\"segment-bar-label\">\n                  <span className=\"segment-name\">{segment.name}</span>\n                  <span className=\"segment-location\">{segment.location}</span>\n                </div>\n                <div className=\"segment-bar-wrapper\">\n                  <div \n                    className={`segment-bar ${segment.sport === 'Run' ? 'run' : 'ride'}`}\n                    style={{ width: `${Math.min(segment.attempts * 5, 100)}%` }}\n                  >\n                    <span className=\"segment-attempts\">{segment.attempts}</span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n        \n        <div className=\"segments-table-container\">\n          <h3>Segments Details</h3>\n          <table className=\"segments-table\">\n            <thead>\n              <tr>\n                <th>Segment</th>\n                <th>Type</th>\n                <th>Sport</th>\n                <th>Distance</th>\n                <th>Elevation</th>\n                <th>Grade</th>\n                <th>Attempts</th>\n                <th>PR</th>\n                <th>PR Date</th>\n              </tr>\n            </thead>\n            <tbody>\n              {filteredSegments.map(segment => (\n                <tr key={segment.id} className={segment.sport === 'Run' ? 'run-row' : 'ride-row'}>\n                  <td>\n                    <div className=\"segment-name-cell\">\n                      <span className=\"segment-name\">{segment.name}</span>\n                      <span className=\"segment-location\">{segment.location}</span>\n                    </div>\n                  </td>\n                  <td>{segment.type}</td>\n                  <td>{segment.sport}</td>\n                  <td>{(segment.distance / 1000).toFixed(1)} km</td>\n                  <td>{segment.elevation_gain || '-'} m</td>\n                  <td>{segment.average_grade ? `${segment.average_grade}%` : '-'}</td>\n                  <td>{segment.attempts}</td>\n                  <td>\n                    {segment.pr_time && (\n                      <div className=\"pr-cell\">\n                        <div>{formatTime(segment.pr_time)}</div>\n                        <div className=\"pr-detail\">\n                          {segment.sport === 'Run' && segment.pr_pace && formatPace(segment.pr_pace)}\n                          {segment.sport === 'Ride' && segment.pr_power && `${segment.pr_power}W`}\n                        </div>\n                      </div>\n                    )}\n                  </td>\n                  <td>{segment.pr_date || '-'}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </section>\n    </div>\n  );\n};\n\nexport default Segments;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}